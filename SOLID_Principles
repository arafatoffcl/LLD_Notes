SOLID Principles:
----------------
-> The SOLID principle helps in reducing tight coupling. Tight coupling means a group of classes are highly dependent on one another which you should avoid in 
your code.

-> Loosely coupled classes minimize changes in your code, helps in making code more reusable, maintainable, flexible, easily testable and stable.

-> Principles (Guidelines / Fundamental Approach)

S - Single Responsibility Principles
O - Open Closed Principles
L - Liskovâ€™s Substitution Principle
I - Interface Segregation Principle
D - Dependency Inversion Principle

Single Responsibility Principle
-------------------------------
The Single Responsibility Principle states that: "A class should have only one reason to change."

which means every class should have a single responsibility or single job or single purpose.

Example :
-------
Take the example of developing software. The task is divided into different members doing different things as front-end designers do design,
the tester does testing and backend developer takes care of backend development part then we can say that everyone has a single job or responsibility.

Most of the time it happens that when programmers have to add features or new behavior they implement everything into the existing class 
which is completely wrong. 

It makes their code lengthy, complex and consumes time when later something needs to be modified. Use layers in your application and break God classes into 
smaller classes or modules.

